{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Transform" : "AWS::Serverless-2016-10-31",
  "Description" : "AWS Service Availability backend services.",

  "Parameters" : {
    "AdminEmail" : {
	  "Description" : "The email address of an admin to email when a Regex miss occurs. Leave blank to not set up an SNS topic.",
	  "Type" : "String"
	},
	"AllowedIPRange" : {
	  "Description" : "The IP range that is allowed to access the API.",
	  "Type" : "String"
	},
	"SharedSecret" : {
	   "Type" : "String",
	   "Description" : "A shared secret that will be used to ensure only the Cloudfront distribution can access the S3 website content."
	},
	"CustomDomainName" : {
	    "Type" : "String",
		"Description" : "The alternate domain name to use in the CloudFront distribution"
	},
	"DnsValidationDomain" : {
	  "Type" : "String",
	  "Description" : "The domain where you will validate ownership for the certificate that is created. For example, if your custom domain name is www.example.com, you'd provide example.com as the value here."
	},
	"CodeBucket" : {
	    "Description" : "The bucket where the code is uploaded",
		"Type" : "String"
	},
	"CodeKey" : {
	    "Description" : "The object key of the lambda deployment package",
		"Type" : "String"
	}
  },

  "Conditions" : {
    "UseSNS" : {
	   "Fn::Not" : [
	     {
	       "Fn::Equals" : [
		     {
			   "Ref" : "AdminEmail"
		     },
		     ""
		   ]
		 }
	   ]
     }
  },

  "Mappings" : {
    "Constants" : {
	  "MetricNames" : {
	    "ExtractionFailures" : "ExtractBeginEndFailures"
	  }
	}
  },

  "Resources" : {
	"DataBucket" : {
	  "Type" : "AWS::S3::Bucket",
	  "Properties" : {
	   "BucketName" : "aws-service-availability-data",
	    "BucketEncryption" : {
		  "ServerSideEncryptionConfiguration" : [
		    {
		      "ServerSideEncryptionByDefault" : {
		        "SSEAlgorithm" : "AES256"
		    }
		  }
		 ]
		}
	  }
	},
	"DataBucketPolicy" : {
	  "Type" : "AWS::S3::BucketPolicy",
	  "Properties" : {
	   "Bucket" : {
	     "Ref" : "DataBucket"
	   },
	    "PolicyDocument" : {
		  "Version":"2012-10-17",
		  "Statement":[
			{
			  "Sid": "Allow the function to initiate DDB exports and retrieve data.",
			  "Effect":"Allow",
			  "Principal": {
			    "AWS" : {
				  "Fn::GetAtt" : [ "ServiceAvailabilityLambdaRole", "Arn" ]
				}
			  },
			  "Action": [
			    "s3:GetObject",
				"s3:PutObject",
				"s3:AbortMultipartUpload"
			  ],
			  "Resource": [
				  {
					"Fn::Sub" : "arn:${AWS::Partition}:s3:::${DataBucket}/*"
				  }
			  ]
			},
			{
			    "Sid" : "Prevent object deletion",
				"Effect" : "Deny",
				"Principal" : {
				  "AWS" : {
				    "Fn::GetAtt" : [ "ServiceAvailabilityLambdaRole", "Arn" ]
				  }
				},
				"Action" : [
				    "s3:DeleteObject"
				],
				"Resource": [
				  {
					"Fn::Sub" : "arn:${AWS::Partition}:s3:::${DataBucket}/*"
				  }
			    ]
		    }
			]
		}
	  }
	},

	"CustomDataBucket" : {
	  "Type" : "AWS::S3::Bucket",
	  "Properties" : {
	   "BucketName" : "aws-service-availability-custom-data",
	    "BucketEncryption" : {
		  "ServerSideEncryptionConfiguration" : [
		    {
		      "ServerSideEncryptionByDefault" : {
		        "SSEAlgorithm" : "AES256"
		    }
		  }
		 ]
		}
	  },
	  "DeletionPolicy" : "Retain"
	},
	"CustomDataBucketPolicy" : {
	  "Type" : "AWS::S3::BucketPolicy",
	  "Properties" : {
	   "Bucket" : {
	     "Ref" : "CustomDataBucket"
	   },
	    "PolicyDocument" : {
		  "Version":"2012-10-17",
		  "Statement":[
			{
			  "Sid": "Allow the function to retrieve custom data files",
			  "Effect":"Allow",
			  "Principal": {
			    "AWS" : {
				  "Fn::GetAtt" : [ "ServiceAvailabilityLambdaRole", "Arn" ]
				}
			  },
			  "Action": [
			    "s3:GetObject"
			  ],
			  "Resource": [
				  {
					"Fn::Sub" : "arn:${AWS::Partition}:s3:::${CustomDataBucket}/*"
				  }
			  ]
			},
			{
			    "Sid" : "Prevent object deletion",
				"Effect" : "Deny",
				"Principal" : {
				  "AWS" : {
				    "Fn::GetAtt" : [ "ServiceAvailabilityLambdaRole", "Arn" ]
				  }
				},
				"Action" : [
				    "s3:DeleteObject"
				],
				"Resource": [
				  {
					"Fn::Sub" : "arn:${AWS::Partition}:s3:::${CustomDataBucket}/*"
				  }
			    ]
		    }
			]
		}
	  }
	},

	"SpilloverBucket" : {
	    "Type" : "AWS::S3::Bucket",
		"Properties" : {
		"BucketName" : "aws-service-availability-query-spillover",
	    "BucketEncryption" : {
		  "ServerSideEncryptionConfiguration" : [
		    {
		      "ServerSideEncryptionByDefault" : {
		        "SSEAlgorithm" : "AES256"
		    }
		  }
		 ]
		}
	  }
	},

	"SNSTopic" : {
	 "Condition" : "UseSNS",
	  "Type" : "AWS::SNS::Topic",
	   "Properties" : {
	    "DisplayName" : "Service Availability Regex Misses",
		 "Subscription" : [
		   {
		    "Protocol" : "email",
			"Endpoint" : {
			 "Ref" : "AdminEmail"
			} 
		   }
		 ]
	   }
	},

    "ServiceAvailabilityLambdaRole" : {
      "Type" : "AWS::IAM::Role",
        "Properties" : {
	      "AssumeRolePolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement" : [
              {
                "Effect" : "Allow",
                "Principal" : {
                  "Service" : [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action"    : [
                  "sts:AssumeRole"
                ]
             }
          ]
        },
		 "ManagedPolicyArns" : [
		  "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
		 ]
	  }
	},

    "LambdaCWLPolicy" : {
	  "Type" : "AWS::IAM::ManagedPolicy",
	  "Properties" : {
	    "PolicyDocument" : {
	      "Version" : "2012-10-17",
          "Statement" : [
		    {
			  "Effect" : "Allow",
			  "Action" : [
			    "logs:CreateLogStream",
			    "logs:CreateLogGroup",
			    "logs:DescribeLogStreams",
			    "logs:PutLogEvents",
			    "logs:DescribeLogGroups"
			  ],
			  "Resource" : [
			    {
			      "Fn::Join" : [
				    "",
				    [
					  "arn:aws:logs:*:",
					  {
					    "Ref" : "AWS::AccountId"
					  },
					  ":*"
				    ]
			      ]
		        }
		      ]
		    }
		  ]
	    },                       
	    "Roles" : [
	      {
		    "Ref" : "ServiceAvailabilityLambdaRole"
	      }
	    ]
	  },
	  "Description" : "Allows AWS Lambda to write CloudWatch Logs."
    },
	"LambdaSNSPolicy" : {
	 "Condition" : "UseSNS",
	 "Type" : "AWS::IAM::ManagedPolicy",
	 "Properties" : {
	    "PolicyDocument" : {
	      "Version" : "2012-10-17",
          "Statement" : [
		    {					
				"Effect" : "Allow",
				"Action" : [
					"sns:Publish"
				],
				"Resource" : [
				  {
					"Ref" : "SNSTopic"
				  }
				]	
		    }
		  ]
		},                       
	  "Roles" : [
		{
			"Ref" : "ServiceAvailabilityLambdaRole"
		}	
	  ]
	 },
	  "Description" : "Allows AWS Lambda to publish to an SNS Topic."
	},
	"LambdaSSMPolicy" : {
	 "Type" : "AWS::IAM::ManagedPolicy",
	 "Properties" : {
	    "PolicyDocument" : {
	      "Version" : "2012-10-17",
          "Statement" : [
		    {					
				"Effect" : "Allow",
				"Action" : [
					"ssm:GetParameter"
				],
				"Resource" : [
				  {
					 "Fn::Sub" : "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${TimeZoneMap}"
				  },
				  {
					 "Fn::Sub" : "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${GlobalServicesList}"
				  },
				  {
					 "Fn::Sub" : "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DefaultTimeZone}"
				  },
				  {
					 "Fn::Sub" : "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ServiceHealthDashboardDataUrl}"
				  }
				]	
		    }
		  ]
		},                       
	  "Roles" : [
		{
			"Ref" : "ServiceAvailabilityLambdaRole"
		}	
	  ]
	 },
	  "Description" : "Allows AWS Lambda to get specific SSM parameters."
	},
	"LambdaDynamoDBPolicy" : {
	 "Type" : "AWS::IAM::ManagedPolicy",
	 "Properties" : {
	    "PolicyDocument" : {
	      "Version" : "2012-10-17",
          "Statement" : [
		    {					
				"Effect" : "Allow",
				"Action" : [
					"dynamodb:BatchGetItem",
					"dynamodb:BatchWriteItem",
					"dynamodb:ConditionCheckItem",
					"dynamodb:DescribeContinuousBackups",
					"dynamodb:DescribeTable",
					"dynamodb:ExportTableToPointInTime",
					"dynamodb:GetItem",
					"dynamodb:PartiQLInsert",
					"dynamodb:PartiQLSelect",
					"dynamodb:PartiQLUpdate",
					"dynamodb:PutItem",
					"dynamodb:Query",
					"dynamodb:Scan",
					"dynamodb:UpdateItem"
				],
				"Resource" : [
				  {
				    "Fn::GetAtt" : ["ServiceHealthDashboardDataTable", "Arn" ]
				  }
				]	
		    }
		  ]
		},                       
	  "Roles" : [
		{
			"Ref" : "ServiceAvailabilityLambdaRole"
		}	
	  ]
	 },
	  "Description" : "Allows AWS Lambda to get specific SSM parameters."
	},
	"LambdaCWMetricPolicy" : {
	  "Type" : "AWS::IAM::ManagedPolicy",
	  "Properties" : {
	    "PolicyDocument" : {
	      "Version" : "2012-10-17",
          "Statement" : [
		    {
			  "Effect" : "Allow",
			  "Action" : [
			    "cloudwatch:PutMetricData"
			  ],
			  "Resource" : [
			    "*"
		      ]
		    }
		  ]
	    },                       
	    "Roles" : [
	      {
		    "Ref" : "ServiceAvailabilityLambdaRole"
	      }
	    ]
	  },
	  "Description" : "Allows AWS Lambda to write CloudWatch metrics."
    },
	"LambdaS3Policy" : {
	  "Type" : "AWS::IAM::ManagedPolicy",
	  "Properties" : {
	    "PolicyDocument" : {
	      "Version" : "2012-10-17",
          "Statement" : [
		    {
			  "Effect" : "Allow",
			  "Action" : [
			    "s3:GetObject"
			  ],
			  "Resource" : [
			    {
				  "Fn::Sub" : "arn:${AWS::Partition}:s3:::${CustomDataBucket}/*"
				}
		      ]
		    },
			{
			  "Effect" : "Allow",
			  "Action" : [
			    "s3:ListBucket"
			  ],
			  "Resource" : [
			    {
				  "Fn::Sub" : "arn:${AWS::Partition}:s3:::${CustomDataBucket}"
				}
		      ]
		    }
		  ]
	    },                       
	    "Roles" : [
	      {
		    "Ref" : "ServiceAvailabilityLambdaRole"
	      }
	    ]
	  },
	  "Description" : "Allows AWS Lambda to get objects from S3."
    },
	
	"ApiGateway" : {
	  "Type" : "AWS::Serverless::Api",
	  "Properties" : {
	    "Domain" : {
		  "CertificateArn" : {
		    "Ref" : "Certificate"
		  },
		  "DomainName" : {
		    "Ref" : "CustomDomainName"
		  },
		  "SecurityPolicy" : "TLS_1_2"
		},
	    "StageName" : "Prod",		 
		"DefinitionBody" : {
		  "swagger" : "2.0",
		  "info" : {
		    "version" : "1.0",
			"title" : "ServiceAvailabilityApiGateway"
		  },
		  "host": "",
		  "basePath" : "/Prod",
		  "schemes" : [
		    "https"
		  ],
		  "paths" : {
		    "/api/serviceavailability" : {
			  "get" : {
				"parameters" : [
				  {
				    "name" : "start",
					"in" : "query",
					"required" : false,
					"type" : "string"
				  },
				  {
				    "name" : "regions",
					"in" : "query",
					"required" : false,
					"type" : "string"
				  },
				  {
				    "name" : "services",
					"in" : "query",
					"required" : false,
					"type" : "string"
				  },
				  {
				    "name" : "end",
					"in" : "query",
					"required" : false,
					"type" : "string"
				  }
				],
				"responses": {
				},
				"x-amazon-apigateway-integration": {
				  "uri": {
				    "Fn::Sub" : "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetSHDData.Arn}/invocations"
				  },
				  "passthroughBehavior": "when_no_match",
				  "httpMethod": "POST",
				  "type": "aws_proxy"
				}
			  },
			  "options": {
				"consumes": [
				  "application/json"
				],
				"produces": [
				  "application/json"
				],
				"responses": {
				  "200": {
					"description": "200 response",
					"headers": {
					  "Access-Control-Allow-Origin": {
						"type": "string"
					  },
					  "Access-Control-Allow-Methods": {
						"type": "string"
					  },
					  "Access-Control-Allow-Headers": {
						"type": "string"
					  }
					}
				  }
				},
				"x-amazon-apigateway-integration": {
				  "responses": {
					"default": {
					  "statusCode": 200,
					  "responseParameters": {
						"method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'",
						"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-Content-Sha256,X-Amz-User-Agent,Accept'",
						"method.response.header.Access-Control-Allow-Origin": "'*'"
					  }
					}
				  },
				  "requestTemplates": {
					"application/json": "{\"statusCode\": 200}"
				  },
				  "passthroughBehavior": "when_no_match",
				  "type": "mock"
				}
			  }
			},
			"/api/serviceavailability/export" : {
			  "get" : {
			    "parameters" : [],
			    "responses": {},
				"x-amazon-apigateway-integration": {
				  "uri": {
				    "Fn::Sub" : "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManualExportSHDData.Arn}/invocations"
				  },
				  "passthroughBehavior": "when_no_match",
				  "httpMethod": "POST",
				  "type": "aws_proxy"
				}
			  },
			  "options": {
				"consumes": [
				  "application/json"
				],
				"produces": [
				  "application/json"
				],
				"responses": {
				  "200": {
					"description": "200 response",
					"headers": {
					  "Access-Control-Allow-Origin": {
						"type": "string"
					  },
					  "Access-Control-Allow-Methods": {
						"type": "string"
					  },
					  "Access-Control-Allow-Headers": {
						"type": "string"
					  }
					}
				  }
				},
				"x-amazon-apigateway-integration": {
				  "responses": {
					"default": {
					  "statusCode": 200,
					  "responseParameters": {
						"method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'",
						"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-Content-Sha256,X-Amz-User-Agent,Accept'",
						"method.response.header.Access-Control-Allow-Origin": "'*'"
					  }
					}
				  },
				  "requestTemplates": {
					"application/json": "{\"statusCode\": 200}"
				  },
				  "passthroughBehavior": "when_no_match",
				  "type": "mock"
				}
			  }
			},
			"/api/serviceavailability/load" : {
			  "get" : {
			    "parameters" : [],
			    "responses": {},
				"x-amazon-apigateway-integration": {
				  "uri": {
				    "Fn::Sub" : "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ManualLoadSHDData.Arn}/invocations"
				  },
				  "passthroughBehavior": "when_no_match",
				  "httpMethod": "POST",
				  "type": "aws_proxy"
				}
			  },
			  "options": {
				"consumes": [
				  "application/json"
				],
				"produces": [
				  "application/json"
				],
				"responses": {
				  "200": {
					"description": "200 response",
					"headers": {
					  "Access-Control-Allow-Origin": {
						"type": "string"
					  },
					  "Access-Control-Allow-Methods": {
						"type": "string"
					  },
					  "Access-Control-Allow-Headers": {
						"type": "string"
					  }
					}
				  }
				},
				"x-amazon-apigateway-integration": {
				  "responses": {
					"default": {
					  "statusCode": 200,
					  "responseParameters": {
						"method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'",
						"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-Content-Sha256,X-Amz-User-Agent,Accept'",
						"method.response.header.Access-Control-Allow-Origin": "'*'"
					  }
					}
				  },
				  "requestTemplates": {
					"application/json": "{\"statusCode\": 200}"
				  },
				  "passthroughBehavior": "when_no_match",
				  "type": "mock"
				}
			  }
			}
		  }
		}
	  }
	},

    "GetSHDData" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
	    "FunctionName" : "GetServiceHealthDashboardData",
		"Description" : "Retrieves the service health dashboard data from a user request.",
        "Handler": "service-availability-function::BAMCIS.ServiceAvailability.Entrypoint::GetData",
        "Runtime":  "dotnetcore3.1",
		"Tracing" : "Active",
        "CodeUri": {
		  "Bucket" : {
		      "Ref" : "CodeBucket"
		  },
		  "Key" : {
		      "Ref" : "CodeKey"
		  }
		},
        "MemorySize": 128,
        "Timeout": 120,
        "Role": {
			"Fn::GetAtt" : ["ServiceAvailabilityLambdaRole", "Arn"]
		},
        "Policies": null,
        "Events": {
			"GetData": {
				"Type": "Api",
				"Properties": {
					"Path": "/api/serviceavailability",
					"Method": "GET",
					"RestApiId" : {
					   "Ref" : "ApiGateway"
					}
				}
			}
        },
		"Environment" : {
		  "Variables" : {
		    "ExtractionFailureMetricName" : {
			  "Fn::FindInMap" : [ "Constants", "MetricNames", "ExtractionFailures" ]
			}	
		  }
	    }
	  }
    },

	"ScheduledLoadSHDData" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
	    "FunctionName" : "ScheduledLoadServiceHealthDashboardData",
		"Description" : "Loads the data from the SHD into DynamoDB",
        "Handler": "service-availability-function::BAMCIS.ServiceAvailability.Entrypoint::ScheduledLoadDataFromSource",
        "Runtime":  "dotnetcore3.1",
		"Tracing" : "Active",
        "CodeUri": {
		  "Bucket" : {
		      "Ref" : "CodeBucket"
		  },
		  "Key" : {
		      "Ref" : "CodeKey"
		  }
		},
        "MemorySize": 512,
        "Timeout": 900,
        "Role": {
			"Fn::GetAtt" : ["ServiceAvailabilityLambdaRole", "Arn"]
		},
        "Policies": null,
        "Events": {
			"LoadData": {
				"Type": "Schedule",
				"Properties": {
					"Enabled" : true,
					"Schedule" : "cron(0 12 * * ? *)",
					"Description" : "Fires the load data function once a day at noon"
				}
			}
        },
		"Environment" : {
		  "Variables" : {
			"ExtractionFailureMetricName" : {
			  "Fn::FindInMap" : [ "Constants", "MetricNames", "ExtractionFailures" ]
			}
		  }
	    }
	  }
    },

	"ManualLoadSHDData" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
	    "FunctionName" : "ManualLoadServiceHealthDashboardData",
		"Description" : "Loads the data from the SHD into DynamoDB",
        "Handler": "service-availability-function::BAMCIS.ServiceAvailability.Entrypoint::ManualLoadDataFromSource",
        "Runtime":  "dotnetcore3.1",
		"Tracing" : "Active",
        "CodeUri": {
		  "Bucket" : {
		      "Ref" : "CodeBucket"
		  },
		  "Key" : {
		      "Ref" : "CodeKey"
		  }
		},
        "MemorySize": 512,
        "Timeout": 900,
        "Role": {
			"Fn::GetAtt" : ["ServiceAvailabilityLambdaRole", "Arn"]
		},
        "Policies": null,
        "Events": {
			"ExportData": {
				"Type": "Api",
				"Properties": {
					"Path": "/api/serviceavailability/load",
					"Method": "GET",
					"RestApiId" : {
					   "Ref" : "ApiGateway"
					}
				}
			}
        },
		"Environment" : {
		  "Variables" : {
			"ExtractionFailureMetricName" : {
			  "Fn::FindInMap" : [ "Constants", "MetricNames", "ExtractionFailures" ]
			}
		  }
	    }
	  }
    },

	"ManualExportSHDData" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
	    "FunctionName" : "ManualExportServiceHealthDashboardData",
		"Description" : "Exports the SHD from DynamoDB to S3 on a schedule",
        "Handler": "service-availability-function::BAMCIS.ServiceAvailability.Entrypoint::ManualExportDataFromDynamoDB",
        "Runtime":  "dotnetcore3.1",
		"Tracing" : "Active",
        "CodeUri": {
		  "Bucket" : {
		      "Ref" : "CodeBucket"
		  },
		  "Key" : {
		      "Ref" : "CodeKey"
		  }
		},
        "MemorySize": 512,
        "Timeout": 900,
        "Role": {
			"Fn::GetAtt" : ["ServiceAvailabilityLambdaRole", "Arn"]
		},
        "Policies": null,
        "Events": {
			"ExportData": {
				"Type": "Api",
				"Properties": {
					"Path": "/api/serviceavailability/export",
					"Method": "GET",
					"RestApiId" : {
					   "Ref" : "ApiGateway"
					}
				}
			}
        },
		"Environment" : {
		  "Variables" : {
			"ExtractionFailureMetricName" : {
			  "Fn::FindInMap" : [ "Constants", "MetricNames", "ExtractionFailures" ]
			},
			"EXPORT_BUCKET" : {
			    "Ref" : "DataBucket"
			},
			"DYNAMODB_TABLE_NAME" : {
			   "Ref" : "ServiceHealthDashboardDataTable"
			},
			"DYNAMODB_TABLE_ARN" : {
			   "Fn::GetAtt" : [ "ServiceHealthDashboardDataTable", "Arn" ]
			}

		  }
	    }
	  }
    },

	"Certificate" : {
	    "Type" : "AWS::CertificateManager::Certificate",
		"Properties" : {
		    "DomainName" : {
			  "Fn::Sub" : "*.${DnsValidationDomain}"
			},
			"DomainValidationOptions" : [
			  {
			    "DomainName" : {
			      "Fn::Sub" : "*.${DnsValidationDomain}"
			    },
				"ValidationDomain" : {
				  "Ref" : "DnsValidationDomain"
				}
			  }
			],
			"ValidationMethod" : "DNS"
		}
	},

	"TimeZoneMap" : {
		"Type" : "AWS::SSM::Parameter",
		"Properties" : {
		  "Name" : "TimeZoneMap",
		  "Type" :  "String",
		  "Value" : "{\"HAST\": \"-10:00\",\"HADT\": \"-09:00\",\"AKST\": \"-09:00\",\"AKDT\": \"-08:00\",\"PST\": \"-08:00\",\"PDT\": \"-07:00\",\"MST\": \"-07:00\",\"MDT\": \"-06:00\",\"CST\": \"-06:00\",\"CDT\": \"-05:00\",\"EST\": \"-05:00\",\"EDT\": \"-04:00\",\"GMT\": \"-00:00\",\"UTC\": \"-00:00\"}",
		  "Description" : "A JSON string that maps time zones, like EST to their time offset, like -04:00"
		}
	},
	"GlobalServicesList" : {
		"Type" : "AWS::SSM::Parameter",
		"Properties" : {
		    "Name" : "GlobalServicesList",
			"Type" : "StringList",
			"Value" : "awswaf,billingconsole,chatbot,chime,cloudfront,fps,globalaccelerator,health,iam,import-export,interregionvpcpeering,management-console,marketplace,organizations,route53,route53domainregistration,spencer,supportcenter,trustedadvisor",
			"Description" : "A list of services that are considered global and do not have a region"
		}
	},
	"DefaultTimeZone" : {
		"Type" : "AWS::SSM::Parameter",
		"Properties" : {
		    "Name" : "DefaultTimeZone",
			"Type" : "String",
			"Value" : "PDT",
			"Description" : "The default time zone for service availability analysis."
		}
	},
	"ServiceHealthDashboardDataUrl" :{
		"Type" : "AWS::SSM::Parameter",
		"Properties" : {
		    "Name" : "ServiceHealthDashboardDataUrl",
			"Type" : "String",
			"Value" : "http://status.aws.amazon.com/data.json",
			"Description" : "The url to the service health dashboard data"
		}
	},

	"ServiceHealthDashboardDataTable" : {
	    "Type" : "AWS::DynamoDB::Table",
		"Properties" : {
		  "AttributeDefinitions" : [
		    {
			  "AttributeName" : "id",
			  "AttributeType" : "S"
			},
			{
			  "AttributeName" : "date",
			  "AttributeType" : "S"
			}
		  ],
		  "KeySchema" : [
		      {
			    "AttributeName" : "id",
			    "KeyType" : "HASH"
			  },
			  {
			    "AttributeName" : "date",
				"KeyType" : "RANGE"
			  }
		   ],
		  "BillingMode" : "PAY_PER_REQUEST",
		  "PointInTimeRecoverySpecification" : { 
		    "PointInTimeRecoveryEnabled" : true
		  },
		  "TableName" : "ServiceHealthDashboardData"
		} 
	},

	"ExtractBeginEndFailureAlarm" : {
	    "Type" : "AWS::CloudWatch::Alarm",
		"Condition" : "UseSNS",
		"Properties" : {
		  "AlarmActions" : [
		    {
		      "Ref" : "SNSTopic"
		    }
		  ],
		  "AlarmDescription" : "Fires whenever a failure is reported in extracting a begin and end time for a dashboard event.",
		  "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
		  "ActionsEnabled" : true,
		  "EvaluationPeriods" : 1,
		  "MetricName" : {
		    "Fn::FindInMap" : [ "Constants", "MetricNames", "ExtractionFailures" ]
		  },
		  "Namespace" : "SHD",
		  "Period" : "10",
		  "Statistic" : "Sum",
		  "Threshold" : "1",
		  "TreatMissingData" : "notBreaching"
		}
	},

	"SHDDatabase" : {
	    "Type" : "AWS::Glue::Database",
		"Properties" : {
		  "CatalogId" : {
		    "Ref" : "AWS::AccountId"
		  },
		  "DatabaseInput" : {
		    "Name" : "shd",
			"Description" : "Contains tables with information from the SHD",
            "LocationUri" : "dynamo-db-flag"
		  }
		}
	},

	"SHDTable" : {
	    "Type" : "AWS::Glue::Table",
		"Properties" : {
		  "CatalogId" : {
		    "Ref" : "AWS::AccountId"
		  },
		  "DatabaseName" : {
		    "Ref" : "SHDDatabase"
		  },
		  "TableInput" : {
		    "Name" : "data",
			"TableType" : "EXTERNAL_TABLE",
			"Parameters" : {
			  "classification" : "dynamodb",
			  "rangekey" : "date",
			  "hashkey" : "id",
			  "typeOfData": "table",
			  "compressionType": "none",
			  "sourceTable" : {
				  "Ref" : "ServiceHealthDashboardDataTable"
			  },
			  "datetimeFormatMapping" : "date=yyyy-MM-dd'T'HH:mm:ss.SSS'Z',start=yyyy-MM-dd'T'HH:mm:ss.SSS'Z',end=yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
			  "columnMapping" : "eventduration=eventDuration,monthlyoutagedurations=monthlyOutageDurations",
			  "defaultTimeZone" : "UTC"
			},
			"StorageDescriptor" : {
			  "Location" : {
			    "Fn::GetAtt" : [ "ServiceHealthDashboardDataTable", "Arn" ]
			  },
			  "Compressed" : false,
			  "Parameters" : {
			    "classification" : "dynamodb",
			    "rangekey" : "date",
			    "hashkey" : "id",
			    "typeOfData": "table",
			    "compressionType": "none",
				"sourceTable" : {
				  "Ref" : "ServiceHealthDashboardDataTable"
				}
			  },
			  "Columns" : [
			    {
				  "Name" : "date",
				  "Type" : "timestamp"
				},
				{
				  "Name" : "description",
				  "Type" : "string"
				},
				{
				  "Name" : "end",
				  "Type" : "timestamp"
				},
				{
				  "Name" : "eventduration",
				  "Type" : "bigint"
				},
				{
				  "Name" : "id",
				  "Type" : "string"
				},
				{
				  "Name" : "monthlyoutagedurations",
				  "Type" : "string"
				},
				{
				  "Name" : "region",
				  "Type" : "string"
				},
				{
				  "Name" : "service",
				  "Type" : "string"
				},
				{
				  "Name" : "region",
				  "Type" : "string"
				},
				{
				  "Name" : "start",
				  "Type" : "timestamp"
				},
				{
				  "Name" : "status",
				  "Type" : "string"
				},
				{
				  "Name" : "summary",
				  "Type" : "string"
				},
				{
				  "Name" : "timeline",
				  "Type" : "string"
				}
			  ] 
			}
		  }
		}
	},

	"SHDAthenaCatalog" : {
	    "Type" : "AWS::Athena::DataCatalog",
		"Properties" : {
		    "Description" : "Data catalog for DDB tables",
			"Name" : "dynamodb",
			"Parameters" : {
			    "function" : {
				    "Fn::Sub" : "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:dynamodb"
				}
			},
			"Type" : "LAMBDA"
		}
	},

	"FindOverlappingEventsQuery" : {
	  "Type" : "AWS::Athena::NamedQuery",
	  "Properties" : {
	    "Name" : "Find Overlapping Events",
		"QueryString" : {
		  "Fn::Join" : [
		    "\n",
			[
				"WITH tbl AS(",
				"SELECT",
				"    concat(dr1.id, '::', cast(cast(to_unixtime(dr1.date) AS BIGINT) AS VARCHAR)) AS event1Id,",
				"    concat(dr2.id, '::', cast(cast(to_unixtime(dr2.date) AS BIGINT) AS VARCHAR)) AS event2Id,",
				"    dr1.region AS event1Region,",
				"    dr2.region AS event2Region,",
				"    dr1.service AS event1Service,",
				"    dr2.service AS event2Service,",
				"    dr1.status AS event1Status,",
				"    dr2.status AS event2Status,",
				"    dr1.start AS event1Start,",
				"    dr1.\"end\" AS event1End,",
				"    dr1.date AS event1Date,",
				"    dr2.start AS event2Start,",
				"    dr2.\"end\" AS event2End,",
				"    dr2.date AS event2Date,",
				"    dr1.description AS event1Description,",
				"    dr2.description AS event2Description",
				{
				    "Fn::Sub" : "FROM \"dynamodb\".\"${SHDDatabase}\".\"${SHDTable}\" AS dr1"
				},
				{
				    "Fn::Sub" : "INNER JOIN \"dynamodb\".\"${SHDDatabase}\".\"${SHDTable}\" AS dr2"
				},
				"    ON dr1.start <= dr2.\"end\"",
				"    AND dr2.start <= dr1.\"end\"",
				"    AND concat(dr1.id, cast(to_unixtime(dr1.date) AS varchar)) != concat(dr2.id, cast(to_unixtime(dr2.date) as varchar))",
				"    AND dr1.region != dr2.region",
				"    AND dr1.region != CASE dr2.region",
				"        WHEN 'us-east-1' THEN 'us-standard'",
				"        ELSE ''",
				"    END",
				"    AND dr2.region != CASE dr1.region",
				"        WHEN 'us-east-1' THEN 'us-standard'",
				"        ELSE ''",
				"    END",
				")",
				"SELECT *",
				"FROM tbl WHERE event1Id < event2Id OR NOT EXISTS (",
				"    SELECT 1",
				"    FROM tbl t2 WHERE",
				"        t2.event1Id = tbl.event2Id",
				"        AND",
				"        t2.event2Id = tbl.event1Id",
				")"
			]
		  ]
		},
		"Database" : "shd"
	  }
	}
  },

  "Outputs" : {
    "APIGatewayUrl" : {
     "Description" : "The URL to access the API directly.",
	 "Value" : {	
		"Fn::Sub" : "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/serviceavailability"   
	 }
   },
    "APIGatewayCustomUrl" : {
      "Description" : "The URL to access the API directly.",
	  "Value" : {	
		"Fn::Sub" : "https://${CustomDomainName}/api/serviceavailability"   
	  }
    }
  }
}